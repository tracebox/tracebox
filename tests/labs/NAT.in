/* Glue */
output0 :: Null -> input1 :: Null
routput1 :: Null -> rinput0 :: Null
output1 :: Null -> input2 :: Null
routput2 :: Null -> rinput1 :: Null
output2 :: Null -> input3 :: Null
routput3 :: Null -> rinput2 :: Null
output3 :: Null -> input4 :: Null
routput4 :: Null -> rinput3 :: Null
output4 :: Null -> input5 :: Null
routput5 :: Null -> rinput4 :: Null

/* start of FileIO (0) */
s0 :: Script(write dump0.active true, pause, loop)
dump0 :: FromDump(@incap@, MMAP false, ACTIVE false, END_CALL s0.step) -> CheckIPHeader(CHECKSUM false) -> output0
rinput0 -> ToDump(@outcap@, ENCAP IP, UNBUFFERED true) -> Discard
/* end of FileIO (0) */

/* start of TCPOnlyNAT (1) */


ftpCtlClass1 :: Classifier(22/0015,	// Control connection
-
)

tcpRW1 :: TCPRewriter(pattern 2.2.2.2 2000-3000 - - 0 1, pass 2)

ftpRW1 :: FTPPortMapper(tcpRW1, tcpRW1, 0)

input1 -> ftpCtlClass1 -> ftpRW1 -> tcpRW1

rinput1 -> [1]tcpRW1

ftpCtlClass1[1] -> tcpRW1

tcpRW1[0] -> output1
tcpRW1[1] -> routput1
tcpRW1[2] -> ICMPRW1::ICMPRewriter(tcpRW1) -> routput1
ICMPRW1[1] -> Print(noMapEvenAfterICMPRW) -> Discard()/* end of TCPOnlyNAT (1) */

/* start of ICMPResponder (2) */
dec2 :: DecIPTTL()
error2 :: ICMPError(3.3.3.3, timeexceeded);

dec2 [1] -> error2  -> routput2;
input2 -> dec2  -> output2;

rinput2 -> routput2
/* end of ICMPResponder (2) */

/* start of TCPResponder (3) */
classifySyn3::IPClassifier(syn,-)

classifySyn3[1] -> output3

input3 -> classifySyn3[0] -> IPMirror() -> StoreData(OFFSET 33, DATA \<12>) -> SetTCPChecksum() -> routput3
rinput3 -> routput3
/* end of TCPResponder (3) */

/* start of ICMPResponder (4) */
dec4 :: DecIPTTL()
error4 :: ICMPError(1.2.3.4, timeexceeded);

dec4 [1] -> error4  -> routput4;
input4 -> dec4  -> output4;

rinput4 -> routput4
/* end of ICMPResponder (4) */

/* start of BlackHole (5) */
input5 -> Discard()
InfiniteSource(LIMIT 0) -> routput5
/* end of BlackHole (5) */


